variables {
    global:
        0: A
        1: B
        2: C
        3: D
    player:
        0: A
}
rule ("comparison") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Compare(Global.B, ==, Global.C));
        "false"
        Set Global Variable(A, Compare(1, ==, 0));
        "true"
        Set Global Variable(A, Compare(Global.B, ==, Global.B));
        "not B"
        Set Global Variable(A, Compare(Global.B, ==, 0));
        "isGameInProgress()"
        Set Global Variable(A, Compare(Is Game In Progress, ==, True));
        Set Global Variable(A, Compare(Global.B, !=, Global.C));
        "true"
        Set Global Variable(A, Compare(1, !=, 0));
        "false"
        Set Global Variable(A, Compare(Global.B, !=, Global.B));
        Set Global Variable(A, Compare(Global.B, !=, 0));
        "not B"
        Set Global Variable(A, Not(Compare(Global.B, !=, 0)));
        "not isGameInProgress()"
        Set Global Variable(A, Compare(Is Game In Progress, !=, True));
        Set Global Variable(A, Compare(Global.B, >=, Global.C));
        "true"
        Set Global Variable(A, Compare(1, >=, 0));
        "true"
        Set Global Variable(A, Compare(Global.B, >=, Global.B));
        Set Global Variable(A, Compare(Global.B, <=, Global.C));
        "false"
        Set Global Variable(A, Compare(1, <=, 0));
        "true"
        Set Global Variable(A, Compare(Global.B, <=, Global.B));
        Set Global Variable(A, Compare(Global.B, >, Global.C));
        "true"
        Set Global Variable(A, Compare(1, >, 0));
        "false"
        Set Global Variable(A, Compare(Global.B, >, Global.B));
        Set Global Variable(A, Compare(Global.B, <, Global.C));
        "false"
        Set Global Variable(A, Compare(1, <, 0));
        "false"
        Set Global Variable(A, Compare(Global.B, <, Global.B));
    }
}

rule ("add") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Add(Global.B, Global.C));
        "B"
        Set Global Variable(A, Add(Global.B, 0));
        "B*2"
        Set Global Variable(A, Add(Global.B, Global.B));
        "3"
        Set Global Variable(A, Add(1, 2));
        Set Global Variable(A, Add(Vector(Global.B, Global.C, Global.D), Vector(1, 2, 3)));
        "vect(5,7,9)"
        Set Global Variable(A, Add(Vector(1, 2, 3), Vector(4, 5, 6)));
    }
}

rule ("subtract") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Subtract(Global.B, Global.C));
        Set Global Variable(A, Subtract(Subtract(Global.B, Global.C), Global.D));
        "B"
        Set Global Variable(A, Subtract(Global.B, 0));
        "0"
        Set Global Variable(A, Subtract(Global.B, Global.B));
        "-1"
        Set Global Variable(A, Subtract(1, 2));
        Set Global Variable(A, Subtract(Vector(Global.B, Global.C, Global.D), Vector(1, 2, 3)));
        "vect(-3,-3,-3)"
        Set Global Variable(A, Subtract(Vector(1, 2, 3), Vector(4, 5, 6)));
    }
}

rule ("negate") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Multiply(-1, Global.B));
        Set Global Variable(A, Modulo(Multiply(-1, Global.B), Global.C));
        Set Global Variable(A, Multiply(-1, Vector(1, Global.B, Multiply(-1, 2))));
        "vect(-1,-2,3)"
        Set Global Variable(A, Multiply(-1, Vector(1, 2, Multiply(-1, 3))));
        Set Global Variable(A, Multiply(-1, 1));
        Set Global Variable(A, Multiply(Multiply(-1, 1), Global.B));
        "A"
        Set Global Variable(A, Multiply(-1, Multiply(-1, Global.A)));
        "1"
        Set Global Variable(A, Multiply(-1, Multiply(-1, 1)));
        "A"
        Set Global Variable(A, Multiply(-1, Multiply(-1, Global.A)));
        "-1"
        Set Global Variable(A, Multiply(-1, Multiply(-1, Multiply(-1, 1))));
        "-A"
        Set Global Variable(A, Multiply(-1, Multiply(-1, Multiply(-1, Global.A))));
        "0.01"
        Set Global Variable(A, Multiply(-1, Multiply(-1, 0.01)));
    }
}

rule ("multiply") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Multiply(Global.B, Global.C));
        "B"
        Set Global Variable(A, Multiply(Global.B, 1));
        "B**2"
        Set Global Variable(A, Multiply(Global.B, Global.B));
        "0"
        Set Global Variable(A, Multiply(Global.B, 0));
        "6"
        Set Global Variable(A, Multiply(2, 3));
        "vect(6,8,10)"
        Set Global Variable(A, Multiply(2, Vector(3, 4, 5)));
        "vect(6,8,10)"
        Set Global Variable(A, Multiply(Vector(3, 4, 5), 2));
        "vect(4,10,18)"
        Set Global Variable(A, Multiply(Vector(1, 2, 3), Vector(4, 5, 6)));
    }
}

rule ("divide") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Divide(Global.B, Global.C));
        "B"
        Set Global Variable(A, Divide(Global.B, 1));
        "0"
        Set Global Variable(A, Divide(Global.B, 0));
        "0"
        Set Global Variable(A, Divide(0, Global.B));
        "0.5"
        Set Global Variable(A, Divide(1, 2));
        Set Global Variable(A, Divide(Multiply(-1, 3), Global.B));
        "vect(3,1.5,1)"
        Set Global Variable(A, Divide(Vector(3, 3, 3), Vector(1, 2, 3)));
        "vect(0.5,1,1.5)"
        Set Global Variable(A, Divide(Vector(1, 2, 3), 2));
    }
}

rule ("modulo") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Modulo(Global.B, Global.C));
        "0"
        Set Global Variable(A, Modulo(Global.B, 0));
        "0"
        Set Global Variable(A, Modulo(0, Global.B));
        "0"
        Set Global Variable(A, Modulo(Global.B, Global.B));
        "1"
        Set Global Variable(A, Modulo(7, 3));
        "-1"
        Set Global Variable(A, Modulo(Multiply(-1, 7), 3));
        "-1"
        Set Global Variable(A, Modulo(Multiply(-1, 7), Multiply(-1, 3)));
        "1"
        Set Global Variable(A, Modulo(7, Multiply(-1, 3)));
    }
}

rule ("power") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Raise To Power(Global.B, Global.C));
        Set Global Variable(A, Raise To Power(Global.B, Raise To Power(Global.C, Global.D)));
        "B"
        Set Global Variable(A, Raise To Power(Global.B, 1));
        "0"
        Set Global Variable(A, Raise To Power(0, Global.B));
        "1"
        Set Global Variable(A, Raise To Power(1, Global.B));
        "0"
        Set Global Variable(A, Raise To Power(Multiply(-1, 1), Global.B));
        "8"
        Set Global Variable(A, Raise To Power(2, 3));
        "0"
        Set Global Variable(A, Raise To Power(Multiply(-1, 2), 3));
    }
}

rule ("assignment") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        Set Global Variable(A, Global.B);
        Set Global Variable At Index(A, 0, Global.B);
        Set Player Variable(Event Player, A, Global.B);
        Set Player Variable At Index(Event Player, A, 0, Global.B);
        "pass"
        Set Global Variable(A, Global.A);
        Set Global Variable(A, Add(Global.A, Global.B));
        Set Player Variable(Event Player, A, Add((Event Player).A, Global.B));
        "pass"
        Set Global Variable(A, Add(Global.A, 0));
        Set Global Variable(A, Subtract(Global.A, Global.B));
        Set Global Variable(A, Multiply(Global.A, Global.B));
        Set Global Variable(A, Divide(Global.A, Global.B));
        Set Global Variable(A, Modulo(Global.A, Global.B));
        Set Global Variable(A, Raise To Power(Global.A, Global.B));
        Set Global Variable(A, Max(Global.A, Global.B));
        Set Global Variable(A, Min(Global.A, Global.B));
        Set Global Variable(A, Add(Global.A, 1));
        Set Global Variable(A, Subtract(Global.A, 1));
    }
}

rule ("and") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, And(Global.A, Global.B));
        "A"
        Set Global Variable(A, And(Global.A, True));
        "false"
        Set Global Variable(A, And(Global.A, False));
        "A"
        Set Global Variable(A, And(Global.A, Global.A));
        "false"
        Set Global Variable(A, And(Global.A, Not(Global.A)));
    }
}

rule ("or") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Or(Global.A, Global.B));
        "A"
        Set Global Variable(A, Or(Global.A, Global.A));
        "true"
        Set Global Variable(A, Or(Global.A, True));
        "A"
        Set Global Variable(A, Or(Global.A, False));
        "true"
        Set Global Variable(A, Or(Global.A, Not(Global.A)));
    }
}

rule ("not") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Not(Global.B));
        "A"
        Set Global Variable(A, Not(Not(Global.A)));
        "false"
        Set Global Variable(A, Not(True));
        "true"
        Set Global Variable(A, Not(False));
    }
}

rule ("in") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, Array Contains(Global.B, Global.A));
        "true"
        Set Global Variable(A, Array Contains(Array(1, Global.A, 3), 3));
        Set Global Variable(A, Array Contains(Array(Global.A, 5, 6), 3));
    }
}

rule ("ternaries") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(A, If-Then-Else(Global.C, Global.B, Global.D));
        "B"
        Set Global Variable(A, If-Then-Else(Compare(0, ==, 0), Global.B, Global.D));
        "D"
        Set Global Variable(A, If-Then-Else(Compare(0, !=, 0), Global.B, Global.D));
        "B"
        Set Global Variable(A, If-Then-Else(Global.C, Global.B, Global.B));
        "if-then-else(C, D, B)"
        Set Global Variable(A, If-Then-Else(Not(Global.C), Global.B, Global.D));
        "D"
        Set Global Variable(A, If-Then-Else(Compare(0, !=, 0), Global.B, If-Then-Else(Compare(0, !=, 0), Global.C, Global.D)));
    }
}

